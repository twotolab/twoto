import caurina.transitions.Equations;import caurina.transitions.properties.DisplayShortcuts;import caurina.transitions.Tweener;import mx.events.EventDispatcher;import mx.utils.Delegate;import BuildXML2Object;import Loading;class R56OneTeaser extends MovieClip {		public var dispatchEvent:Function;	public var dispatchQueue:Function;	public var addEventListener:Function;	public var removeEventListener:Function;		private var mainXMLObj:Object;	private var mainXML:BuildXML2Object;		private var loading:Loading;	private var mainLoader:MovieClipLoader;	private var border:MovieClip;	private var mask:MovieClip;		private var refType:String;	private var refPage:String;	private var rootPath:String;		private var needle:MovieClip;	private var bubble:MovieClip;	private var clickArea:MovieClip;	private var needleMask:MovieClip;	private var contentContainer:MovieClip;		private var easing:Number;		private var followMouse:Function;	private var rotateNeedle:Function;		private var bubblePosX:Number;	private var bubblePosY:Number;		private var needlePosX:Number;	private var needlePosY:Number;		private var rotationAngle:Number;		private var bubbleExplosion:MovieClip;		private var isOverBubble:Boolean;		private var angle:Number;	private var startPosX:Number;	private var startPosY:Number;		private static var teaserWidth:Number = 654;	private static var teaserHeight:Number = 276;		private var container:MovieClip;		private var explosionDone:Boolean;		public function R56OneTeaser(){	}		public function init():Void {		EventDispatcher.initialize(this);				DisplayShortcuts.init();				Stage.scaleMode = "noScale";				easing = 0.1;		isOverBubble = false;				followMouse = Delegate.create(this, onFollowMouse);		rotateNeedle = Delegate.create(this, onRotateNeedle);				container = createEmptyMovieClip("container",2);		//mask		createEmptyMovieClip("mask", 9000);		mask.beginFill(0xCCCCCC, 100);		mask.moveTo(teaserWidth-10, 10);		mask.lineTo(teaserWidth-10, teaserHeight-10);		mask.lineTo(10, teaserHeight-10);		mask.lineTo(10, 10);		mask.endFill();		container.setMask(mask);				//border		createEmptyMovieClip("border", 1);		border.lineStyle(10, 0xCCCCCC, 100, true, "none", "square", "miter", 8);		border.moveTo(5, 5);		border.lineTo(teaserWidth-5, 5);		border.lineTo(teaserWidth-5, teaserHeight-5);		border.lineTo(5, teaserHeight-5);		border.lineTo(5, 5);			bubble = container.attachMovie("Bubble", "_bubble", getNextHighestDepth());		bubble._xscale = 70;		bubble._yscale = 70;		bubble._x = 170;		bubble._y = 122;		bubble.init();				angle = 3;		startPosX = bubble._x;		startPosY = bubble._y;				needle = container.attachMovie("Needle", "_needle", getNextHighestDepth());		needle._x = 482;		needle._y = 200;				/*		//attach preloader 		loading = Loading(attachMovie("Loading","loading",10));		loading._x = 20;		loading._y = 20;				mainXML = new BuildXML2Object(_xmlPath);		mainXML.addEventListener("onBuildXML2ObjectReady", this);		*/		//moving();		buildTeaser();			}	private function hideNeedle():Void {		if (bubble.bubbleMC.hitTest(_root._xmouse, _root._ymouse) == true) {			//trace("hitTest true");			needle._visible = true;					} else {			//trace("hitTest false");			needle._visible = false;		}				}	private function showNeedle():Void {		needle._visible = true;	}		public function onBuildXML2ObjectReady(evt:Object): Void{		mainXML.removeEventListener("onBuildXML2ObjectReady", this);		mainXMLObj = evt.xmlObj;				mainLoader = new MovieClipLoader();		this.onEnterFrame = function(){			var main_progress:Object = mainLoader.getProgress(this);			var percent:Number = Math.round((main_progress.bytesLoaded/main_progress.bytesTotal)*100);			if(percent > 1){				loading.setText(percent + "%");			}			if(percent == 100){				delete this.onEnterFrame;				loading.removeMovieClip();				buildTeaser();			}		}			}		private function buildTeaser(){		//trace("------------> buildTeaser - MINIMALISM");				//trace(subHeadline + " text: " + mainXMLObj.content.text[1].data)				bubble.bubbleText.copy.text = "SCHON NEUGIERIG?";				clickArea.onRollOver = Delegate.create(this, onMouseOver);		clickArea.onRollOut = Delegate.create(this, onMouseOut);				bubblePosX = bubble._x;		bubblePosY = bubble._y;				bubble.bubbleMC.onRollOver = Delegate.create(this, onBubbleOver);		bubble.bubbleMC.onRollOut = Delegate.create(this, onBubbleOut);		// optional to restart // bubble.bubbleMC.onRelease = Delegate.create(this, onBubbleReleased);			}	private function reset():Void{		showNeedle();		bubble._visible = true;	}	private function onMouseOver():Void {				if (explosionDone != true) {			delete bubble.onEnterFrame;			clickArea.onEnterFrame = followMouse;						showNeedle();			//trace("onMouseOver")		}	}		private function onMouseOut():Void {		//trace("onMouseOut")				// hideNeedle();		hideNeedle();	}		private function onBubbleOver():Void {		//bubble.onEnterFrame = rotateNeedle;				isOverBubble = true;		//trace("onBubbleOver")		bubble.statusBig = true;		bubble.bigOrigineX = bubblePosX -30;		bubble.bigOrigineY = bubblePosY + 20;		Tweener.addTween(bubble, { time:2, _xscale:100, _yscale:100, _x:(bubblePosX - 30), _y:(bubblePosY +20), transition:Equations.easeOutElastic,onComplete:Delegate.create(this,bubbleBig) } );		startNeedleRotation()	}		private function onBubbleOut():Void {				delete bubble.onEnterFrame;		delete clickArea.onEnterFrame;				isOverBubble = false;		angle = 3;		startPosX = bubble._x;		startPosY = bubble._y;		bubble.statusBig = false;		//moving();		Tweener.addTween(bubble, { time:2, _xscale:70, _yscale:70, _x:bubblePosX, _y:bubblePosY, transition:Equations.easeOutElastic ,onComplete:Delegate.create(this,bubbleSmall)} );		Tweener.addTween(needle, { time:2, _rotation:0 } );		if (needle.hitTest(clickArea) != true) {			needle._visible = false;			needle._x = 700;			needle._y = 100		}	}		private function bubbleSmall():Void {		// hideNeedle();		bubble.setStatus = bubble.SMALL;	}	private function bubbleBig():Void {		bubble.setStatus = bubble.BIG;	}			private function onBubbleReleased():Void {						//trace("onBubbleReleased")		var tmpX:Number;		var tmpY:Number;				calculateRotation();		var radian:Number = (rotationAngle+90)/(180/Math.PI);				tmpX = bubble._x + Math.sin(radian)*(bubble._width/2 + needle._width-90);		tmpY = bubble._y + Math.cos(radian)*(bubble._width/2 + needle._width-90);		/*		needle._x = tmpX;		needle._y = tmpY;		*/		//Tweener.addTween(needle, {time:0.05, _x:(tmpX), _y:(tmpY),transition:Equations.easeNone ,onComplete:Delegate.create(this, startExplosion)});		//startExplosion();		explosionDone = true;		startExplosion();	}	private function calculateRotation():Void{				rotationAngle = -1 * Math.atan2((bubble._y - this._y), (bubble._x - this._x)) / (Math.PI / 180);				if(rotationAngle < 0){			rotationAngle = 180+(180 + rotationAngle);		}				rotationAngle = Math.round(rotationAngle);				needle.rotation = rotationAngle;	}		private function startExplosion():Void {				//Tweener.addTween(needle, { delay:0.5, time:0.5, _autoAlpha:0, transition:Equations.easeNone } );		needle._visible = false;				bubbleExplosion = attachMovie("BubbleExplosion", "bubble_explosion", getNextHighestDepth());		bubbleExplosion.gotoAndStop(1);		bubbleExplosion._xscale = bubble._xscale;		bubbleExplosion._yscale = bubble._yscale;		bubbleExplosion._x = bubble._x;		bubbleExplosion._y = bubble._y;				onEnterFrame = Delegate.create(this, onCheckExplosion);		bubble._visible = false;		bubbleExplosion.gotoAndPlay(1);					}		private function onCheckExplosion():Void {		if (bubbleExplosion._currentframe == bubbleExplosion._totalframes) {				delete onEnterFrame;				bubbleExplosion.stop();				// reset(); // optional to restart		}	}		private function enableButton(){		//button_mc.onRelease = Delegate.create(this, onTeaserRelease);	}		private function startNeedleRotation():Void {		delete clickArea.onEnterFrame;		bubble.onEnterFrame = rotateNeedle;		}		private function onFollowMouse() {				var vx:Number = (_xmouse - (needle._x-needle._width/2)) * easing;		var vy:Number = (_ymouse - needle._y) * easing;				if ((needle._x + vx + needle._width / 2) > 0 && (needle._x + vx + needle._width / 2) < mask._width) {			needle._x += vx;		}				if ((needle._y + vy + needle._height) > 0 && (needle._y + vy + needle._height) < mask._height) {			needle._y += vy;		}	}		private function onRotateNeedle () {				var dx = bubble._xmouse - this._x ;		var dy = bubble._ymouse - this._y ;				var ang = Math.atan2(dy, dx) * 180 / Math.PI ;		var dr = ang - needle._rotation ;		if (Math.abs (dr) > 180) {			dr = dr > 0 ? dr - 360 : 360 + dr ;		}		needle._rotation +=  dr / 8 ;				var targetRadian:Number = (-1*needle._rotation + 90)/(180/Math.PI);					needlePosX = bubble._x + Math.sin(targetRadian)*(bubble.bubbleMC._width/2 -10+ needle._width);		needlePosY = bubble._y + Math.cos(targetRadian)*(bubble.bubbleMC._height/2 -10+ needle._height);				var vx:Number = (needlePosX - needle._x)*easing;		var vy:Number = (needlePosY - needle._y)*easing;				needle._x += vx;		needle._y += vy;			}}