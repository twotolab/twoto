<?php return array (
  'preserve_keys' => false,
  'update_object' => true,
  'unique_key' => 'name',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"getresources-1.2.2-pl\\/modSnippet\\/e2d3f55829b5619deb3b0edc4022c053\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"getresources"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '3a71110eefb60142200b212f50aa6edc',
  'package' => 'modx',
  'class' => 'modSnippet',
  'signature' => 'e2d3f55829b5619deb3b0edc4022c053',
  'native_key' => NULL,
  'object' => '{"id":null,"name":"getResources","description":"<strong>1.2.2-pl<\\/strong> A general purpose Resource listing and summarization snippet for MODx Revolution","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * getResources\\n *\\n * A general purpose Resource listing and summarization snippet for MODx 2.0.\\n *\\n * @author Jason Coward\\n * @copyright Copyright 2010, Jason Coward\\n * @version 1.2.2-pl - October 18, 2010\\n *\\n * TEMPLATES\\n *\\n * tpl - Name of a chunk serving as a resource template\\n * [NOTE: if not provided, properties are dumped to output for each resource]\\n *\\n * tplOdd - (Opt) Name of a chunk serving as resource template for resources with an odd idx value\\n * (see idx property)\\n * tplFirst - (Opt) Name of a chunk serving as resource template for the first resource (see first\\n * property)\\n * tplLast - (Opt) Name of a chunk serving as resource template for the last resource (see last\\n * property)\\n * tpl_{n} - (Opt) Name of a chunk serving as resource template for the nth resource\\n *\\n * SELECTION\\n *\\n * parents - Comma-delimited list of ids serving as parents\\n *\\n * depth - (Opt) Integer value indicating depth to search for resources from each parent [default=10]\\n *\\n * tvFilters - (Opt) Delimited-list of TemplateVar values to filter resources by. Supports two\\n * delimiters and two value search formats. THe first delimeter || represents a logical OR and the\\n * primary grouping mechanism.  Within each group you can provide a comma-delimited list of values.\\n * These values can be either tied to a specific TemplateVar by name, e.g. myTV==value, or just the\\n * value, indicating you are searching for the value in any TemplateVar tied to the Resource. An\\n * example would be &tvFilters=`filter2==one,filter1==bar%||filter1==foo`\\n * [NOTE: filtering by values uses a LIKE query and % is considered a wildcard.]\\n * [NOTE: this only looks at the raw value set for specific Resource, i. e. there must be a value\\n * specifically set for the Resource and it is not evaluated.]\\n *\\n * where - (Opt) A JSON expression of criteria to build any additional where clauses from. An example would be\\n * &where=`{{\\"alias:LIKE\\":\\"foo%\\", \\"OR:alias:LIKE\\":\\"%bar\\"},{\\"OR:pagetitle:=\\":\\"foobar\\", \\"AND:description:=\\":\\"raboof\\"}}`\\n *\\n * sortby - (Opt) Field to sort by [default=publishedon]\\n * sortbyTV - (opt) A Template Variable name to sort by (if supplied, this precedes the sortby value) [default=]\\n * sortbyAlias - (Opt) Query alias for sortby field [default=]\\n * sortbyEscaped - (Opt) Escapes the field name specified in sortby [default=0]\\n * sortdir - (Opt) Order which to sort by [default=DESC]\\n * sortdirTV - (Opt) Order which to sort by a TV [default=DESC]\\n * limit - (Opt) Limits the number of resources returned [default=5]\\n * offset - (Opt) An offset of resources returned by the criteria to skip [default=0]\\n *\\n * OPTIONS\\n *\\n * includeContent - (Opt) Indicates if the content of each resource should be returned in the\\n * results [default=0]\\n * includeTVs - (Opt) Indicates if TemplateVar values should be included in the properties available\\n * to each resource template [default=0]\\n * processTVs - (Opt) Indicates if TemplateVar values should be rendered as they would on the\\n * resource being summarized [default=0]\\n * tvPrefix - (Opt) The prefix for TemplateVar properties [default=tv.]\\n * idx - (Opt) You can define the starting idx of the resources, which is an property that is\\n * incremented as each resource is rendered [default=1]\\n * first - (Opt) Define the idx which represents the first resource (see tplFirst) [default=1]\\n * last - (Opt) Define the idx which represents the last resource (see tplLast) [default=# of\\n * resources being summarized + first - 1]\\n * outputSeparator - (Opt) An optional string to separate each tpl instance [default=\\"\\\\n\\"]\\n *\\n *\\/\\n$output = array();\\n$outputSeparator = isset($outputSeparator) ? $outputSeparator : \\"\\\\n\\";\\n\\n\\/* set default properties *\\/\\n$tpl = !empty($tpl) ? $tpl : \'\';\\n$includeContent = !empty($includeContent) ? true : false;\\n$includeTVs = !empty($includeTVs) ? true : false;\\n$processTVs = !empty($processTVs) ? true : false;\\n$tvPrefix = isset($tvPrefix) ? $tvPrefix : \'tv.\';\\n$parents = (!empty($parents) || $parents === \'0\') ? explode(\',\', $parents) : array($modx->resource->get(\'id\'));\\n$depth = isset($depth) ? (integer) $depth : 10;\\n$children = array();\\nforeach ($parents as $parent) {\\n    $pchildren = $modx->getChildIds($parent, $depth);\\n    if (!empty($pchildren)) $children = array_merge($children, $pchildren);\\n}\\nif (!empty($children)) $parents = array_merge($parents, $children);\\n\\n$tvFilters = !empty($tvFilters) ? explode(\'||\', $tvFilters) : array();\\n\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\n$showUnpublished = !empty($showUnpublished) ? true : false;\\n$showDeleted = !empty($showDeleted) ? true : false;\\n\\n$sortby = isset($sortby) ? $sortby : \'publishedon\';\\n$sortbyTV = isset($sortbyTV) ? $sortbyTV : \'\';\\n$sortbyAlias = isset($sortbyAlias) ? $sortbyAlias : \'modResource\';\\n$sortbyEscaped = !empty($sortbyEscaped) ? true : false;\\nif ($sortbyEscaped) $sortby = \\"`{$sortby}`\\";\\nif (!empty($sortbyAlias)) $sortby = \\"`{$sortbyAlias}`.{$sortby}\\";\\n$sortdir = isset($sortdir) ? $sortdir : \'DESC\';\\n$sortdirTV = isset($sortdirTV) ? $sortdirTV : \'DESC\';\\n$limit = isset($limit) ? (integer) $limit : 5;\\n$offset = isset($offset) ? (integer) $offset : 0;\\n$totalVar = !empty($totalVar) ? $totalVar : \'total\';\\n\\n\\/* build query *\\/\\n$contextResourceTbl = $modx->getTableName(\'modContextResource\');\\n\\n\\/* multiple context support *\\/\\nif (!empty($context)) {\\n    $context = explode(\',\',$context);\\n    $contexts = array();\\n    foreach ($context as $ctx) {\\n        $contexts[] = $modx->quote($ctx);\\n    }\\n    $context = implode(\',\',$contexts);\\n    unset($contexts,$ctx);\\n} else {\\n    $context = $modx->quote($modx->context->get(\'key\'));\\n}\\n$criteria = $modx->newQuery(\'modResource\', array(\\n    \\"`modResource`.`parent` IN (\\" . implode(\',\', $parents) . \\")\\"\\n    ,\\"(`modResource`.`context_key` IN ({$context}) OR EXISTS(SELECT 1 FROM {$contextResourceTbl} `ctx` WHERE `ctx`.`resource` = `modResource`.`id` AND `ctx`.`context_key` IN ({$context})))\\"\\n));\\nif (empty($showDeleted)) {\\n    $criteria->andCondition(array(\'deleted\' => \'0\'));\\n}\\nif (empty($showUnpublished)) {\\n    $criteria->andCondition(array(\'published\' => \'1\'));\\n}\\nif (empty($showHidden)) {\\n    $criteria->andCondition(array(\'hidemenu\' => \'0\'));\\n}\\nif (!empty($hideContainers)) {\\n    $criteria->andCondition(array(\'isfolder\' => \'0\'));\\n}\\n\\/* include\\/exclude resources, via &resources=`123,-456` prop *\\/\\nif (!empty($resources)) {\\n    $resources = explode(\',\',$resources);\\n    $include = array();\\n    $exclude = array();\\n    foreach ($resources as $resource) {\\n        $resource = (int)$resource;\\n        if ($resource == 0) continue;\\n        if ($resource < 0) {\\n            $exclude[] = abs($resource);\\n        } else {\\n            $include[] = $resource;\\n        }\\n    }\\n    if (!empty($include)) {\\n        $criteria->orCondition(array(\'modResource.id:IN\' => $include),null,10);\\n    }\\n    if (!empty($exclude)) {\\n        $criteria->andCondition(array(\'modResource.id NOT IN (\'.implode(\',\',$exclude).\')\'));\\n    }\\n}\\nif (!empty($tvFilters)) {\\n    $tmplVarTbl = $modx->getTableName(\'modTemplateVar\');\\n    $tmplVarResourceTbl = $modx->getTableName(\'modTemplateVarResource\');\\n    $conditions = array();\\n    foreach ($tvFilters as $fGroup => $tvFilter) {\\n        $filterGroup = count($tvFilters) > 1 ? $fGroup + 1 : 0;\\n        $filters = explode(\',\', $tvFilter);\\n        foreach ($filters as $filter) {\\n            $f = explode(\'==\', $filter);\\n            if (count($f) == 2) {\\n                $tvName = $modx->quote($f[0]);\\n                $tvValue = $modx->quote($f[1]);\\n                $conditions[$filterGroup][] = \\"EXISTS (SELECT 1 FROM {$tmplVarResourceTbl} `tvr` JOIN {$tmplVarTbl} `tv` ON `tvr`.`value` LIKE {$tvValue} AND `tv`.`name` = {$tvName} AND `tv`.`id` = `tvr`.`tmplvarid` WHERE `tvr`.`contentid` = `modResource`.`id`)\\";\\n            } elseif (count($f) == 1) {\\n                $tvValue = $modx->quote($f[0]);\\n                $conditions[$filterGroup][] = \\"EXISTS (SELECT 1 FROM {$tmplVarResourceTbl} `tvr` JOIN {$tmplVarTbl} `tv` ON `tvr`.`value` LIKE {$tvValue} AND `tv`.`id` = `tvr`.`tmplvarid` WHERE `tvr`.`contentid` = `modResource`.`id`)\\";\\n            }\\n        }\\n    }\\n    if (!empty($conditions)) {\\n        foreach ($conditions as $cGroup => $c) {\\n            if ($cGroup > 0) {\\n                $criteria->orCondition($c, null, $cGroup);\\n            } else {\\n                $criteria->andCondition($c);\\n            }\\n        }\\n    }\\n}\\nif (!empty($where)) {\\n    $criteria->where($where);\\n}\\n\\n$total = $modx->getCount(\'modResource\', $criteria);\\n$modx->setPlaceholder($totalVar, $total);\\n\\n$columns = $includeContent ? $modx->getSelectColumns(\'modResource\', \'modResource\') : $modx->getSelectColumns(\'modResource\', \'modResource\', \'\', array(\'content\'), true);\\n$criteria->select($columns);\\nif (!empty($sortbyTV)) {\\n    $criteria->leftJoin(\'modTemplateVar\', \'tvDefault\', array(\\n        \\"tvDefault.name\\" => $sortbyTV\\n    ));\\n    $criteria->leftJoin(\'modTemplateVarResource\', \'tvSort\', array(\\n        \\"`tvSort`.`contentid` = `modResource`.`id`\\",\\n        \\"`tvSort`.`tmplvarid` = `tvDefault`.`id`\\"\\n    ));\\n    $criteria->select(\\"IFNULL(`tvSort`.`value`, `tvDefault`.`default_text`) AS `sortTV`\\");\\n    $criteria->sortby(\\"`sortTV`\\", $sortdirTV);\\n}\\nif (!empty($sortby)) $criteria->sortby($sortby, $sortdir);\\nif (!empty($limit)) $criteria->limit($limit, $offset);\\n\\nif (!empty($debug)) {\\n    $criteria->prepare();\\n    $modx->log(modX::LOG_LEVEL_ERROR, $criteria->toSQL());\\n}\\n$collection = $modx->getCollection(\'modResource\', $criteria);\\n\\n$idx = !empty($idx) ? intval($idx) : 1;\\n$first = empty($first) && $first !== \'0\' ? 1 : intval($first);\\n$last = empty($last) ? (count($collection) + $idx - 1) : intval($last);\\n\\n\\/* include parseTpl *\\/\\ninclude_once $modx->getOption(\'getresources.core_path\',null,$modx->getOption(\'core_path\').\'components\\/getresources\\/\').\'include.parsetpl.php\';\\n\\nforeach ($collection as $resourceId => $resource) {\\n    $tvs = array();\\n    if (!empty($includeTVs)) {\\n        $templateVars =& $resource->getMany(\'TemplateVars\');\\n        foreach ($templateVars as $tvId => $templateVar) {\\n            $tvs[$tvPrefix . $templateVar->get(\'name\')] = !empty($processTVs) ? $templateVar->renderOutput($resource->get(\'id\')) : $templateVar->get(\'value\');\\n        }\\n    }\\n    $odd = ($idx & 1);\\n    $properties = array_merge(\\n        $scriptProperties\\n        ,array(\\n            \'idx\' => $idx\\n            ,\'first\' => $first\\n            ,\'last\' => $last\\n        )\\n        ,$resource->toArray()\\n        ,$tvs\\n    );\\n    $resourceTpl = \'\';\\n    $tplidx = \'tpl_\' . $idx;\\n    if (!empty($$tplidx)) $resourceTpl = parseTpl($$tplidx, $properties);\\n    switch ($idx) {\\n        case $first:\\n            if (!empty($tplFirst)) $resourceTpl = parseTpl($tplFirst, $properties);\\n            break;\\n        case $last:\\n            if (!empty($tplLast)) $resourceTpl = parseTpl($tplLast, $properties);\\n            break;\\n    }\\n    if ($odd && empty($resourceTpl) && !empty($tplOdd)) $resourceTpl = parseTpl($tplOdd, $properties);\\n    if (!empty($tpl) && empty($resourceTpl)) $resourceTpl = parseTpl($tpl, $properties);\\n    if (empty($resourceTpl)) {\\n        $chunk = $modx->newObject(\'modChunk\');\\n        $chunk->setCacheable(false);\\n        $output[]= $chunk->process(array(), \'<pre>\' . print_r($properties, true) .\'<\\/pre>\');\\n    } else {\\n        $output[]= $resourceTpl;\\n    }\\n    $idx++;\\n}\\n\\n\\/* output *\\/\\n$output = implode($outputSeparator, $output);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\',$scriptProperties,false);\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder,$output);\\n    return \'\';\\n}\\nreturn $output;","locked":0,"properties":"a:28:{s:3:\\"tpl\\";a:6:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:121:\\"Name of a chunk serving as a resource template. NOTE: if not provided, properties are dumped to output for each resource.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;}s:6:\\"tplOdd\\";a:6:{s:4:\\"name\\";s:6:\\"tplOdd\\";s:4:\\"desc\\";s:100:\\"Name of a chunk serving as resource template for resources with an odd idx value (see idx property).\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;}s:8:\\"tplFirst\\";a:6:{s:4:\\"name\\";s:8:\\"tplFirst\\";s:4:\\"desc\\";s:89:\\"Name of a chunk serving as resource template for the first resource (see first property).\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;}s:7:\\"tplLast\\";a:6:{s:4:\\"name\\";s:7:\\"tplLast\\";s:4:\\"desc\\";s:87:\\"Name of a chunk serving as resource template for the last resource (see last property).\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;}s:6:\\"sortby\\";a:6:{s:4:\\"name\\";s:6:\\"sortby\\";s:4:\\"desc\\";s:42:\\"Field to sort by. Defaults to publishedon.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:11:\\"publishedon\\";s:7:\\"lexicon\\";N;}s:8:\\"sortbyTV\\";a:6:{s:4:\\"name\\";s:8:\\"sortbyTV\\";s:4:\\"desc\\";s:65:\\"Name of a Template Variable to sort by. Defaults to empty string.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;}s:11:\\"sortbyAlias\\";a:6:{s:4:\\"name\\";s:11:\\"sortbyAlias\\";s:4:\\"desc\\";s:58:\\"Query alias for sortby field. Defaults to an empty string.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;}s:13:\\"sortbyEscaped\\";a:6:{s:4:\\"name\\";s:13:\\"sortbyEscaped\\";s:4:\\"desc\\";s:82:\\"Determines if the field name specified in sortby should be escaped. Defaults to 0.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";N;}s:7:\\"sortdir\\";a:6:{s:4:\\"name\\";s:7:\\"sortdir\\";s:4:\\"desc\\";s:41:\\"Order which to sort by. Defaults to DESC.\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:3:\\"ASC\\";s:4:\\"vaue\\";s:3:\\"ASC\\";}i:1;a:2:{s:4:\\"text\\";s:4:\\"DESC\\";s:5:\\"value\\";s:4:\\"DESC\\";}}s:5:\\"value\\";s:4:\\"DESC\\";s:7:\\"lexicon\\";N;}s:9:\\"sortdirTV\\";a:6:{s:4:\\"name\\";s:9:\\"sortdirTV\\";s:4:\\"desc\\";s:61:\\"Order which to sort a Template Variable by. Defaults to DESC.\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:3:\\"ASC\\";s:4:\\"vaue\\";s:3:\\"ASC\\";}i:1;a:2:{s:4:\\"text\\";s:4:\\"DESC\\";s:5:\\"value\\";s:4:\\"DESC\\";}}s:5:\\"value\\";s:4:\\"DESC\\";s:7:\\"lexicon\\";N;}s:5:\\"limit\\";a:6:{s:4:\\"name\\";s:5:\\"limit\\";s:4:\\"desc\\";s:55:\\"Limits the number of resources returned. Defaults to 5.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"5\\";s:7:\\"lexicon\\";N;}s:6:\\"offset\\";a:6:{s:4:\\"name\\";s:6:\\"offset\\";s:4:\\"desc\\";s:56:\\"An offset of resources returned by the criteria to skip.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";N;}s:9:\\"tvFilters\\";a:6:{s:4:\\"name\\";s:9:\\"tvFilters\\";s:4:\\"desc\\";s:778:\\"Delimited-list of TemplateVar values to filter resources by. Supports two delimiters and two value search formats. THe first delimeter || represents a logical OR and the primary grouping mechanism.  Within each group you can provide a comma-delimited list of values. These values can be either tied to a specific TemplateVar by name, e.g. myTV==value, or just the value, indicating you are searching for the value in any TemplateVar tied to the Resource. An example would be &tvFilters=`filter2==one,filter1==bar%||filter1==foo`. <br \\/>NOTE: filtering by values uses a LIKE query and % is considered a wildcard. <br \\/>ANOTHER NOTE: This only looks at the raw value set for specific Resource, i. e. there must be a value specifically set for the Resource and it is not evaluated.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;}s:5:\\"depth\\";a:6:{s:4:\\"name\\";s:5:\\"depth\\";s:4:\\"desc\\";s:88:\\"Integer value indicating depth to search for resources from each parent. Defaults to 10.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"10\\";s:7:\\"lexicon\\";N;}s:7:\\"parents\\";a:6:{s:4:\\"name\\";s:7:\\"parents\\";s:4:\\"desc\\";s:57:\\"Optional. Comma-delimited list of ids serving as parents.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;}s:14:\\"includeContent\\";a:6:{s:4:\\"name\\";s:14:\\"includeContent\\";s:4:\\"desc\\";s:95:\\"Indicates if the content of each resource should be returned in the results. Defaults to false.\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";N;}s:10:\\"includeTVs\\";a:6:{s:4:\\"name\\";s:10:\\"includeTVs\\";s:4:\\"desc\\";s:124:\\"Indicates if TemplateVar values should be included in the properties available to each resource template. Defaults to false.\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";N;}s:10:\\"showHidden\\";a:6:{s:4:\\"name\\";s:10:\\"showHidden\\";s:4:\\"desc\\";s:85:\\"Indicates if Resources that are hidden from menus should be shown. Defaults to false.\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";N;}s:15:\\"showUnpublished\\";a:6:{s:4:\\"name\\";s:15:\\"showUnpublished\\";s:4:\\"desc\\";s:79:\\"Indicates if Resources that are unpublished should be shown. Defaults to false.\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";N;}s:11:\\"showDeleted\\";a:6:{s:4:\\"name\\";s:11:\\"showDeleted\\";s:4:\\"desc\\";s:75:\\"Indicates if Resources that are deleted should be shown. Defaults to false.\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";N;}s:9:\\"resources\\";a:6:{s:4:\\"name\\";s:9:\\"resources\\";s:4:\\"desc\\";s:177:\\"A comma-separated list of resource IDs to exclude or include. IDs with a - in front mean to exclude. Ex: 123,-456 means to include Resource 123, but always exclude Resource 456.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;}s:10:\\"processTVs\\";a:6:{s:4:\\"name\\";s:10:\\"processTVs\\";s:4:\\"desc\\";s:117:\\"Indicates if TemplateVar values should be rendered as they would on the resource being summarized. Defaults to false.\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";N;}s:8:\\"tvPrefix\\";a:6:{s:4:\\"name\\";s:8:\\"tvPrefix\\";s:4:\\"desc\\";s:55:\\"The prefix for TemplateVar properties. Defaults to: tv.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"tv.\\";s:7:\\"lexicon\\";N;}s:3:\\"idx\\";a:6:{s:4:\\"name\\";s:3:\\"idx\\";s:4:\\"desc\\";s:120:\\"You can define the starting idx of the resources, which is an property that is incremented as each resource is rendered.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;}s:5:\\"first\\";a:6:{s:4:\\"name\\";s:5:\\"first\\";s:4:\\"desc\\";s:81:\\"Define the idx which represents the first resource (see tplFirst). Defaults to 1.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;}s:4:\\"last\\";a:6:{s:4:\\"name\\";s:4:\\"last\\";s:4:\\"desc\\";s:129:\\"Define the idx which represents the last resource (see tplLast). Defaults to the number of resources being summarized + first - 1\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;}s:13:\\"toPlaceholder\\";a:6:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:85:\\"If set, will assign the result to this placeholder instead of outputting it directly.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;}s:5:\\"debug\\";a:6:{s:4:\\"name\\";s:5:\\"debug\\";s:4:\\"desc\\";s:68:\\"If true, will send the SQL query to the MODx log. Defaults to false.\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";N;}}","moduleguid":""}',
);